const questionBox = document.getElementById("question-box");
const optionsBox = document.getElementById("options");
const messageBox = document.getElementById("message");
const statsBox = document.getElementById("stats");
const rewardBox = document.getElementById("reward"); // –Ω–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è —Ç–∞–±–ª–∏—á–µ–∫

let currentRound = 0;
let currentQuestionIndex = 0;
let correctAnswers = 0;
let totalErrors = 0;


// === –ò—Å–ø—ã—Ç–∞–Ω–∏—è ===
const rounds = [
    {
        title: "–ò—Å–ø—ã—Ç–∞–Ω–∏–µ 1: am / is / are",
        questions: [
            { fullText: "He ___ happy.", correct: "is", options: ["am", "is", "are"] },
            { fullText: "I ___ a student.", correct: "am", options: ["am", "is", "are"] },
            { fullText: "They ___ from London.", correct: "are", options: ["am", "is", "are"] },
            { fullText: "She ___ tired.", correct: "is", options: ["am", "is", "are"] },
            { fullText: "We ___ at school.", correct: "are", options: ["am", "is", "are"] },
            { fullText: "It ___ blue.", correct: "is", options: ["am", "is", "are"] },
            { fullText: "You ___ ready.", correct: "are", options: ["am", "is", "are"] },
            { fullText: "My friend ___ here.", correct: "is", options: ["am", "is", "are"] },
            { fullText: "The cats ___ on the sofa.", correct: "are", options: ["am", "is", "are"] },
            { fullText: "I ___ excited.", correct: "am", options: ["am", "is", "are"] }
        ]
    },
    {
        title: "–ò—Å–ø—ã—Ç–∞–Ω–∏–µ 2: have / has got",
        questions: [
            { fullText: "I ___ a dog.", correct: "have got", options: ["have got", "has got"] },
            { fullText: "He ___ many friends.", correct: "has got", options: ["have got", "has got"] },
            { fullText: "They ___ time.", correct: "have got", options: ["have got", "has got"] },
            { fullText: "My mum ___ a car.", correct: "has got", options: ["have got", "has got"] },
            { fullText: "We ___ a problem.", correct: "have got", options: ["have got", "has got"] },
            { fullText: "Tom ___ long hair.", correct: "has got", options: ["have got", "has got"] },
            { fullText: "You ___ a plan.", correct: "have got", options: ["have got", "has got"] },
            { fullText: "My parents ___ a big house.", correct: "have got", options: ["have got", "has got"] },
            { fullText: "She ___ blue eyes.", correct: "has got", options: ["have got", "has got"] },
            { fullText: "My sister ___ a cat.", correct: "has got", options: ["have got", "has got"] }
        ]
    },
    {
        title: "–ò—Å–ø—ã—Ç–∞–Ω–∏–µ 3: can / can't",
        questions: [
            { fullText: "I ___ swim very well.", correct: "can", options: ["can", "can't"] },
            { fullText: "He ___ speak English. He is from London.", correct: "can", options: ["can", "can't"] },
            { fullText: "People ___ fly.", correct: "can't", options: ["can", "can't"] },
            { fullText: "Dolphins ___ jump high.", correct: "can", options: ["can", "can't"] },
            { fullText: "She ___ ride a bike fast. She like it.", correct: "can", options: ["can", "can't"] },
            { fullText: "You ___ read the book in the library.", correct: "can", options: ["can", "can't"] },
            { fullText: "The frog ___ talk.", correct: "can't", options: ["can", "can't"] },
            { fullText: "My brother ___ play the piano. He plays it at the school concerts.", correct: "can", options: ["can", "can't"] },
            { fullText: "The baby ___ walk.", correct: "can't", options: ["can", "can't"] },
            { fullText: "We ___ see the stars tonight. It's cloudy.", correct: "can't", options: ["can", "can't"] }
        ]
    }
];

// === –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —ç–∫—Ä–∞–Ω–æ–≤ ===
function showScreen(screenId) {
    document.querySelectorAll(".screen").forEach(el => el.classList.remove("active"));
    document.getElementById(screenId + "-screen").classList.add("active");
}
// === –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–∞—É–Ω–¥–∞ ===
function showRewardMessage(message) {
    questionBox.textContent = "–ú–æ–ª–æ–¥–µ—Ü!";
    optionsBox.innerHTML = "";
    messageBox.innerHTML = `<p>${message}</p>`;
    statsBox.style.display = "none";

    setTimeout(() => {
        nextRound();
    }, 5000); // 5 —Å–µ–∫—É–Ω–¥
}

// === –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ ===
function showQuestion() {
    const round = rounds[currentRound];
    const q = round.questions[currentQuestionIndex];

    updateStats();

    questionBox.textContent = q.fullText;
    optionsBox.innerHTML = "";
    messageBox.innerHTML = "";

    q.options.forEach(option => {
        const btn = document.createElement("button");
        btn.className = "default";
        btn.textContent = option;
        btn.onclick = () => checkAnswer(btn, option, q.correct);
        optionsBox.appendChild(btn);
    });
}

// === –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ ===
function checkAnswer(button, selected, correct) {
    const buttons = document.querySelectorAll("button");
    buttons.forEach(btn => btn.disabled = true);

    if (selected === correct) {
        button.classList.remove("default");
        button.classList.add("correct");
        messageBox.innerHTML = "<p style='color:green;'>–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ö–æ—Ç –±–ª–∏–∂–µ!</p>";
        correctAnswers++;
        updateStats();

        setTimeout(() => {
            messageBox.innerHTML = "";
            currentQuestionIndex++;
            if (currentQuestionIndex < 10) {
                showQuestion();
            } else {
                // –ü–æ—Å–ª–µ 1 —Ä–∞—É–Ω–¥–∞
                if (currentRound === 0) {
                    showRewardMessage("–¢—ã —É–≤–∏–¥–µ–ª –∫–æ—Ç–∞ –≤ –æ–∫–Ω–µ!");
                }
                // –ü–æ—Å–ª–µ 2 —Ä–∞—É–Ω–¥–∞
                else if (currentRound === 1) {
                    showRewardMessage("–ù–∞ –ø–æ–ª—É —Ç—ã –∑–∞–º–µ—Ç–∏–ª —Å–ª–µ–¥—ã...");
                }
                // –ü–æ—Å–ª–µ 3 —Ä–∞—É–Ω–¥–∞
                else if (currentRound === 2) {
                    showRewardMessage("–û–Ω –æ—Å—Ç–∞–≤–∏–ª —Å–≤–æ—é –∏–≥—Ä—É—à–∫—É –Ω–∞ –¥–∏–≤–∞–Ω–µ.");
                }
            }
        }, 1000);
    } else {
        button.classList.add("wrong");
        totalErrors++;
        updateStats();
        messageBox.innerHTML = "<p style='color:red;'>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–¥—É–º–∞–π –µ—â—ë!</p>";

        setTimeout(() => {
            buttons.forEach(btn => {
                btn.disabled = false;
                btn.classList.remove("wrong");
            });
        }, 1000);
    }
}

// === –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ä–∞—É–Ω–¥–∞–º–∏ (5 —Å–µ–∫—É–Ω–¥) ===
function showPauseBetweenRounds() {
    questionBox.textContent = "–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...";
    optionsBox.innerHTML = `<p>–°–ª–µ–¥—É—é—â–µ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥</p>`;
    messageBox.innerHTML = "";
    statsBox.style.display = "none";

    setTimeout(() => {
        nextRound();
    }, 5000); // 5 —Å–µ–∫—É–Ω–¥
}

// === –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å ===
function nextRound() {
    currentRound++;
    currentQuestionIndex = 0;
    statsBox.style.display = "block";

    if (currentRound >= rounds.length) {
        endGame();
    } else {
        const round = rounds[currentRound];
        questionBox.textContent = round.title;
        showQuestion();
    }
}

// === –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã ===
function endGame() {
    let ending = "";

    if (totalErrors === 0) {
        ending = "üéâ –£—Ä–∞! –¢—ã –Ω–∞—à—ë–ª –∫–æ—Ç–∞! –û–Ω –≥–æ—Ä–¥–∏—Ç—Å—è —Ç–æ–±–æ–π üêæ";
    } else if (totalErrors <= 3) {
        ending = "üò∫ –ö–æ—Ç –Ω–∞—à—ë–ª—Å—è! –ù–æ –æ–Ω –Ω–µ–º–Ω–æ–≥–æ –æ–±–∏–¥–µ–ª—Å—è... –¢—ã –ø–æ—á—Ç–∏ –¥–æ–≥–Ω–∞–ª –µ–≥–æ.";
    } else if (totalErrors <= 7) {
        ending = "üòø –ö–æ—Ç —É—Å–∫–æ–ª—å–∑–Ω—É–ª... –ù–æ —Ç—ã –º–æ–ª–æ–¥–µ—Ü! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!";
    } else {
        ending = "üö´ –ö–æ—Ç —É—à—ë–ª –¥–∞–ª–µ–∫–æ. –ü–æ–ø—Ä–æ–±—É–π –ø—Ä–æ–π—Ç–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –ª—É—á—à–µ!";
    }

    questionBox.textContent = "–ö–æ–Ω–µ—Ü –∏–≥—Ä—ã";
    optionsBox.innerHTML = `
        <p>${ending}</p>
        <button onclick="restartGame()">–ò–≥—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ</button>
    `;
    messageBox.innerHTML = "";
}

// === –°–±—Ä–æ—Å –∏–≥—Ä—ã ===
function restartGame() {
    currentRound = 0;
    currentQuestionIndex = 0;
    correctAnswers = 0;
    totalErrors = 0;
    updateStats();

    const round = rounds[currentRound];
    questionBox.textContent = round.title;
    showQuestion();
}

// === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===
function updateStats() {
    statsBox.textContent = `–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: ${correctAnswers} | –û—à–∏–±–æ–∫: ${totalErrors}`;
}

// === –°—Ç–∞—Ä—Ç –∏–≥—Ä—ã ===
function startGame() {
    showScreen("game");
    questionBox.textContent = rounds[currentRound].title;
    showQuestion();
}

// === –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ ===
document.addEventListener("DOMContentLoaded", () => {
    const menu = document.getElementById("menu-screen");
    const resumeBtn = document.createElement("button");
    resumeBtn.textContent = "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É";
    resumeBtn.onclick = () => {
        resetGame();
        showScreen("game");
        showQuestion();
    };
    menu.appendChild(resumeBtn);
});

function resetGame() {
    currentRound = 0;
    currentQuestionIndex = 0;
    correctAnswers = 0;
    totalErrors = 0;
    updateStats();
}
